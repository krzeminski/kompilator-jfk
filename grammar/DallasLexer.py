# Generated from Dallas.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,193,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,
        3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
        10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,22,4,22,153,8,22,11,22,12,22,154,1,23,1,23,5,23,159,8,23,10,
        23,12,23,162,9,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,
        27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,5,31,182,8,31,10,31,12,
        31,185,9,31,1,32,4,32,188,8,32,11,32,12,32,189,1,32,1,32,0,0,33,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,5,1,0,
        48,57,3,0,10,10,13,13,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,3,0,9,10,12,13,32,32,196,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,1,67,1,0,0,0,3,73,1,0,0,0,5,78,1,0,0,0,7,81,1,0,0,0,9,
        84,1,0,0,0,11,87,1,0,0,0,13,90,1,0,0,0,15,92,1,0,0,0,17,94,1,0,0,
        0,19,96,1,0,0,0,21,98,1,0,0,0,23,100,1,0,0,0,25,102,1,0,0,0,27,104,
        1,0,0,0,29,106,1,0,0,0,31,108,1,0,0,0,33,112,1,0,0,0,35,118,1,0,
        0,0,37,126,1,0,0,0,39,134,1,0,0,0,41,141,1,0,0,0,43,147,1,0,0,0,
        45,152,1,0,0,0,47,156,1,0,0,0,49,165,1,0,0,0,51,167,1,0,0,0,53,169,
        1,0,0,0,55,171,1,0,0,0,57,173,1,0,0,0,59,175,1,0,0,0,61,177,1,0,
        0,0,63,179,1,0,0,0,65,187,1,0,0,0,67,68,5,112,0,0,68,69,5,114,0,
        0,69,70,5,105,0,0,70,71,5,110,0,0,71,72,5,116,0,0,72,2,1,0,0,0,73,
        74,5,114,0,0,74,75,5,101,0,0,75,76,5,97,0,0,76,77,5,100,0,0,77,4,
        1,0,0,0,78,79,5,38,0,0,79,80,5,38,0,0,80,6,1,0,0,0,81,82,5,124,0,
        0,82,83,5,124,0,0,83,8,1,0,0,0,84,85,5,94,0,0,85,86,5,94,0,0,86,
        10,1,0,0,0,87,88,5,61,0,0,88,89,5,61,0,0,89,12,1,0,0,0,90,91,5,61,
        0,0,91,14,1,0,0,0,92,93,5,44,0,0,93,16,1,0,0,0,94,95,5,59,0,0,95,
        18,1,0,0,0,96,97,5,40,0,0,97,20,1,0,0,0,98,99,5,41,0,0,99,22,1,0,
        0,0,100,101,5,123,0,0,101,24,1,0,0,0,102,103,5,125,0,0,103,26,1,
        0,0,0,104,105,5,91,0,0,105,28,1,0,0,0,106,107,5,93,0,0,107,30,1,
        0,0,0,108,109,5,105,0,0,109,110,5,110,0,0,110,111,5,116,0,0,111,
        32,1,0,0,0,112,113,5,102,0,0,113,114,5,108,0,0,114,115,5,111,0,0,
        115,116,5,97,0,0,116,117,5,116,0,0,117,34,1,0,0,0,118,119,5,102,
        0,0,119,120,5,108,0,0,120,121,5,111,0,0,121,122,5,97,0,0,122,123,
        5,116,0,0,123,124,5,51,0,0,124,125,5,50,0,0,125,36,1,0,0,0,126,127,
        5,102,0,0,127,128,5,108,0,0,128,129,5,111,0,0,129,130,5,97,0,0,130,
        131,5,116,0,0,131,132,5,54,0,0,132,133,5,52,0,0,133,38,1,0,0,0,134,
        135,5,115,0,0,135,136,5,116,0,0,136,137,5,114,0,0,137,138,5,105,
        0,0,138,139,5,110,0,0,139,140,5,103,0,0,140,40,1,0,0,0,141,142,5,
        97,0,0,142,143,5,114,0,0,143,144,5,114,0,0,144,145,5,97,0,0,145,
        146,5,121,0,0,146,42,1,0,0,0,147,148,3,45,22,0,148,149,3,57,28,0,
        149,150,3,45,22,0,150,44,1,0,0,0,151,153,7,0,0,0,152,151,1,0,0,0,
        153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,46,1,0,0,0,156,
        160,3,61,30,0,157,159,8,1,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,
        158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,
        164,3,61,30,0,164,48,1,0,0,0,165,166,5,43,0,0,166,50,1,0,0,0,167,
        168,5,45,0,0,168,52,1,0,0,0,169,170,5,42,0,0,170,54,1,0,0,0,171,
        172,5,47,0,0,172,56,1,0,0,0,173,174,5,46,0,0,174,58,1,0,0,0,175,
        176,5,33,0,0,176,60,1,0,0,0,177,178,5,34,0,0,178,62,1,0,0,0,179,
        183,7,2,0,0,180,182,7,3,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,
        181,1,0,0,0,183,184,1,0,0,0,184,64,1,0,0,0,185,183,1,0,0,0,186,188,
        7,4,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,
        1,0,0,0,190,191,1,0,0,0,191,192,6,32,0,0,192,66,1,0,0,0,5,0,154,
        160,183,189,1,6,0,0
    ]

class DallasLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINT = 1
    READ = 2
    AND = 3
    OR = 4
    XOR = 5
    EQ = 6
    ASSIGN = 7
    COMMA = 8
    SEMI = 9
    LPAREN = 10
    RPAREN = 11
    LCURLY = 12
    RCURLY = 13
    LBRACK = 14
    RBRACK = 15
    INT_KEY = 16
    FLOAT_KEY = 17
    FLOAT_32_KEY = 18
    FLOAT_64_KEY = 19
    STRING_KEY = 20
    ARRAY_KEY = 21
    FLOAT = 22
    INT = 23
    STRING = 24
    PLUS = 25
    MINUS = 26
    ASTERISK = 27
    SLASH = 28
    DOT = 29
    EXCLAMATION = 30
    DQ = 31
    ID = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'read'", "'&&'", "'||'", "'^^'", "'=='", "'='", 
            "','", "';'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'int'", 
            "'float'", "'float32'", "'float64'", "'string'", "'array'", 
            "'+'", "'-'", "'*'", "'/'", "'.'", "'!'", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "PRINT", "READ", "AND", "OR", "XOR", "EQ", "ASSIGN", "COMMA", 
            "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACK", "RBRACK", 
            "INT_KEY", "FLOAT_KEY", "FLOAT_32_KEY", "FLOAT_64_KEY", "STRING_KEY", 
            "ARRAY_KEY", "FLOAT", "INT", "STRING", "PLUS", "MINUS", "ASTERISK", 
            "SLASH", "DOT", "EXCLAMATION", "DQ", "ID", "WS" ]

    ruleNames = [ "PRINT", "READ", "AND", "OR", "XOR", "EQ", "ASSIGN", "COMMA", 
                  "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACK", 
                  "RBRACK", "INT_KEY", "FLOAT_KEY", "FLOAT_32_KEY", "FLOAT_64_KEY", 
                  "STRING_KEY", "ARRAY_KEY", "FLOAT", "INT", "STRING", "PLUS", 
                  "MINUS", "ASTERISK", "SLASH", "DOT", "EXCLAMATION", "DQ", 
                  "ID", "WS" ]

    grammarFileName = "Dallas.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



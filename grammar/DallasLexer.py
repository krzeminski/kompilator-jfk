# Generated from Dallas.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
        4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,21,4,21,145,8,21,11,21,12,21,146,
        1,22,1,22,5,22,151,8,22,10,22,12,22,154,9,22,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
        1,30,5,30,174,8,30,10,30,12,30,177,9,30,1,31,4,31,180,8,31,11,31,
        12,31,181,1,31,1,31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,1,0,5,1,0,48,57,3,0,10,10,13,13,34,34,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,188,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,1,65,1,0,0,0,3,71,1,0,0,0,5,76,1,0,0,0,7,79,1,0,0,
        0,9,82,1,0,0,0,11,85,1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,92,1,
        0,0,0,19,94,1,0,0,0,21,96,1,0,0,0,23,98,1,0,0,0,25,100,1,0,0,0,27,
        102,1,0,0,0,29,104,1,0,0,0,31,106,1,0,0,0,33,110,1,0,0,0,35,116,
        1,0,0,0,37,124,1,0,0,0,39,132,1,0,0,0,41,139,1,0,0,0,43,144,1,0,
        0,0,45,148,1,0,0,0,47,157,1,0,0,0,49,159,1,0,0,0,51,161,1,0,0,0,
        53,163,1,0,0,0,55,165,1,0,0,0,57,167,1,0,0,0,59,169,1,0,0,0,61,171,
        1,0,0,0,63,179,1,0,0,0,65,66,5,112,0,0,66,67,5,114,0,0,67,68,5,105,
        0,0,68,69,5,110,0,0,69,70,5,116,0,0,70,2,1,0,0,0,71,72,5,114,0,0,
        72,73,5,101,0,0,73,74,5,97,0,0,74,75,5,100,0,0,75,4,1,0,0,0,76,77,
        5,38,0,0,77,78,5,38,0,0,78,6,1,0,0,0,79,80,5,124,0,0,80,81,5,124,
        0,0,81,8,1,0,0,0,82,83,5,94,0,0,83,84,5,94,0,0,84,10,1,0,0,0,85,
        86,5,61,0,0,86,87,5,61,0,0,87,12,1,0,0,0,88,89,5,61,0,0,89,14,1,
        0,0,0,90,91,5,44,0,0,91,16,1,0,0,0,92,93,5,59,0,0,93,18,1,0,0,0,
        94,95,5,40,0,0,95,20,1,0,0,0,96,97,5,41,0,0,97,22,1,0,0,0,98,99,
        5,123,0,0,99,24,1,0,0,0,100,101,5,125,0,0,101,26,1,0,0,0,102,103,
        5,91,0,0,103,28,1,0,0,0,104,105,5,93,0,0,105,30,1,0,0,0,106,107,
        5,105,0,0,107,108,5,110,0,0,108,109,5,116,0,0,109,32,1,0,0,0,110,
        111,5,102,0,0,111,112,5,108,0,0,112,113,5,111,0,0,113,114,5,97,0,
        0,114,115,5,116,0,0,115,34,1,0,0,0,116,117,5,102,0,0,117,118,5,108,
        0,0,118,119,5,111,0,0,119,120,5,97,0,0,120,121,5,116,0,0,121,122,
        5,51,0,0,122,123,5,50,0,0,123,36,1,0,0,0,124,125,5,102,0,0,125,126,
        5,108,0,0,126,127,5,111,0,0,127,128,5,97,0,0,128,129,5,116,0,0,129,
        130,5,54,0,0,130,131,5,52,0,0,131,38,1,0,0,0,132,133,5,115,0,0,133,
        134,5,116,0,0,134,135,5,114,0,0,135,136,5,105,0,0,136,137,5,110,
        0,0,137,138,5,103,0,0,138,40,1,0,0,0,139,140,3,43,21,0,140,141,3,
        55,27,0,141,142,3,43,21,0,142,42,1,0,0,0,143,145,7,0,0,0,144,143,
        1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,44,1,
        0,0,0,148,152,3,59,29,0,149,151,8,1,0,0,150,149,1,0,0,0,151,154,
        1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,
        1,0,0,0,155,156,3,59,29,0,156,46,1,0,0,0,157,158,5,43,0,0,158,48,
        1,0,0,0,159,160,5,45,0,0,160,50,1,0,0,0,161,162,5,42,0,0,162,52,
        1,0,0,0,163,164,5,47,0,0,164,54,1,0,0,0,165,166,5,46,0,0,166,56,
        1,0,0,0,167,168,5,33,0,0,168,58,1,0,0,0,169,170,5,34,0,0,170,60,
        1,0,0,0,171,175,7,2,0,0,172,174,7,3,0,0,173,172,1,0,0,0,174,177,
        1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,62,1,0,0,0,177,175,1,
        0,0,0,178,180,7,4,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,
        0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,184,6,31,0,0,184,64,1,
        0,0,0,5,0,146,152,175,181,1,6,0,0
    ]

class DallasLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINT = 1
    READ = 2
    AND = 3
    OR = 4
    XOR = 5
    EQ = 6
    ASSIGN = 7
    COMMA = 8
    SEMI = 9
    LPAREN = 10
    RPAREN = 11
    LCURLY = 12
    RCURLY = 13
    LBRACK = 14
    RBRACK = 15
    INT_KEY = 16
    FLOAT_KEY = 17
    FLOAT_32_KEY = 18
    FLOAT_64_KEY = 19
    STRING_KEY = 20
    FLOAT = 21
    INT = 22
    STRING = 23
    PLUS = 24
    MINUS = 25
    ASTERISK = 26
    SLASH = 27
    DOT = 28
    EXCLAMATION = 29
    DQ = 30
    ID = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'read'", "'&&'", "'||'", "'^^'", "'=='", "'='", 
            "','", "';'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'int'", 
            "'float'", "'float32'", "'float64'", "'string'", "'+'", "'-'", 
            "'*'", "'/'", "'.'", "'!'", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "PRINT", "READ", "AND", "OR", "XOR", "EQ", "ASSIGN", "COMMA", 
            "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACK", "RBRACK", 
            "INT_KEY", "FLOAT_KEY", "FLOAT_32_KEY", "FLOAT_64_KEY", "STRING_KEY", 
            "FLOAT", "INT", "STRING", "PLUS", "MINUS", "ASTERISK", "SLASH", 
            "DOT", "EXCLAMATION", "DQ", "ID", "WS" ]

    ruleNames = [ "PRINT", "READ", "AND", "OR", "XOR", "EQ", "ASSIGN", "COMMA", 
                  "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACK", 
                  "RBRACK", "INT_KEY", "FLOAT_KEY", "FLOAT_32_KEY", "FLOAT_64_KEY", 
                  "STRING_KEY", "FLOAT", "INT", "STRING", "PLUS", "MINUS", 
                  "ASTERISK", "SLASH", "DOT", "EXCLAMATION", "DQ", "ID", 
                  "WS" ]

    grammarFileName = "Dallas.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


